<!-- project:元素是pom文件的根元素 。 原样复制 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- modelVersion:是表明POM使用的对象模型的版本，通常不会改动 。 原样复制 -->
	<modelVersion>4.0.0</modelVersion>
	<!-- groupId这个元素表示组织或机构项目的唯一标识。groupId是项目的一个关键标识符,通常是基于组织的完全限定域名。比如 org.apache.maven.plugins是所有Maven插件的指定的groupId. 
		一般写自己的域名 -->
	<groupId>com.zhuani21</groupId>
	<!-- 项目或组件的唯一标识名，作为最后打包文件的名字的一部分。如：<artifactId>-<version>.<extension>（例如，myapp-1.0.jar）（最后名字myapp-1.0.jar,其中myapp就是artifactId） 
		一般写域名加项目名，写简称也可以 -->
	<artifactId>spring</artifactId>
	<!-- 这个元素标识项目生成的组件的版本。 SNAPSHOT标识一个版本，这标识这个项目还处在开发阶段。 可以默认也可以自己写，如果是一个组件，提供给其他工程使用，约定好名字一般不要变了 -->
	<version>0.0.1-SNAPSHOT</version>
	<!-- 指打包类型：JAR，WAR，EAR，等等。默认JAR，他不仅会生产对应的文件类型。而且因为值不同会使用不同的构建生命周期. 一般可以指定 -->
	<packaging>jar</packaging>
	<!-- 这个元素是用来显示工程的名字的。通常用在Maven的发布文档。 生成文档使用的， 开发可以不用添加或不管 -->
	<name>spring</name>
	<!-- 通过这个元素找到这个项目的站点。通常用在Maven的发布文档。 生成文档使用的， 开发可以不用添加或不管 -->
	<url>http://maven.apache.org</url>
	<!-- 这个元素提供一些关于你项目的基本描述。通常用在Maven的发布文档。 生成文档使用的， 开发可以不用添加或不管 -->
	<description>这是一个maven学习的工程，其大部分内容在此pom文件中注释</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<junit.version>4.4</junit.version>
		<spring.version>4.1.2.RELEASE</spring.version>
		<hibernate.version>3.6.10.Final</hibernate.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc-portlet</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.2.0.Final</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.18</version>
		</dependency>
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>

</project>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- maven运行一般需要网络。 maven是插件式管理，很多命令第一次执行的时候，会在线下载插件，稍微有些耗时。 查看maven版本，安装好后，能正常显示，证明安装成功。 
	mvn -v mvn -version 快速创建一个简单地工程： mvn archetype:generate -DgroupId=com.mycompany.app 
	-DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false 
	打包一个组件： mvn install 打包一个工程： mvn package 快速生产一个工程的简单的说明文档网站： mvn site 编译工程： 
	mvn compile 测试工程： mvn test 清空工程： mvn clean -->
